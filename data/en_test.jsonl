{"task_id": 3283984, "prompt": "def f_3283984():\n\treturn ", "suffix": "", "canonical_solution": "bytes.fromhex('4a4b4c').decode('utf-8')", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate() == \"JKL\"\n"], "entry_point": "f_3283984", "intent": "decode a hex string '4a4b4c' to UTF-8.", "library": []}
{"task_id": 3844801, "prompt": "def f_3844801(myList):\n\treturn ", "suffix": "", "canonical_solution": "all(x == myList[0] for x in myList)", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate([1,2,3]) == False\n", "\n    assert candidate([1,1,1,1,1,1]) == True\n", "\n    assert candidate([1]) == True\n", "\n    assert candidate(['k','k','k','k','k']) == True\n", "\n    assert candidate([None,'%$#ga',3]) == False\n"], "entry_point": "f_3844801", "intent": "check if all elements in list `myList` are identical", "library": []}
{"task_id": 4302166, "prompt": "def f_4302166():\n\treturn ", "suffix": "", "canonical_solution": "'%*s : %*s' % (20, 'Python', 20, 'Very Good')", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate() == '              Python :            Very Good'\n"], "entry_point": "f_4302166", "intent": "format number of spaces between strings `Python`, `:` and `Very Good` to be `20`", "library": []}
{"task_id": 7555335, "prompt": "def f_7555335(d):\n\treturn ", "suffix": "", "canonical_solution": "d.decode('cp1251').encode('utf8')", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate('hello world!'.encode('cp1251')) == b'hello world!'\n", "\n    assert candidate('%*(^O*'.encode('cp1251')) == b'%*(^O*'\n", "\n    assert candidate(''.encode('cp1251')) == b''\n", "\n    assert candidate('hello world!'.encode('cp1251')) != 'hello world!'\n"], "entry_point": "f_7555335", "intent": "convert a string `d` from CP-1251 to UTF-8", "library": []}
{"task_id": 2544710, "prompt": "def f_2544710(kwargs):\n\treturn ", "suffix": "", "canonical_solution": "{k: v for k, v in list(kwargs.items()) if v is not None}", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate({i: None for i in range(10)}) == {}\n", "\n    assert candidate({i: min(i,4) for i in range(6)}) == {0:0,1:1,2:2,3:3,4:4,5:4}\n", "\n    assert candidate({'abc': 'abc'})['abc'] == 'abc'\n", "\n    assert candidate({'x': None, 'yy': 234}) == {'yy': 234}\n"], "entry_point": "f_2544710", "intent": "get rid of None values in dictionary `kwargs`", "library": []}
{"task_id": 2544710, "prompt": "def f_2544710(kwargs):\n\treturn ", "suffix": "", "canonical_solution": "dict((k, v) for k, v in kwargs.items() if v is not None)", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate({i: None for i in range(10)}) == {}\n", "\n    assert candidate({i: min(i,4) for i in range(6)}) == {0:0,1:1,2:2,3:3,4:4,5:4}\n", "\n    assert candidate({'abc': 'abc'})['abc'] == 'abc'\n", "\n    assert candidate({'x': None, 'yy': 234}) == {'yy': 234}\n"], "entry_point": "f_2544710", "intent": "get rid of None values in dictionary `kwargs`", "library": []}
{"task_id": 14971373, "prompt": "def f_14971373():\n\treturn ", "suffix": "", "canonical_solution": "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)", "test_start": "\nimport subprocess\nfrom unittest.mock import Mock\n\ndef check(candidate):", "test": ["\n    output = b'  PID TTY          TIME CMD\\n  226 pts/1    00:00:00 bash\\n  285 pts/1    00:00:00 python3\\n  352 pts/1    00:00:00 ps\\n'\n    subprocess.check_output = Mock(return_value = output)\n    assert candidate() == output\n"], "entry_point": "f_14971373", "intent": "capture final output of a chain of system commands `ps -ef | grep something | wc -l`", "library": ["subprocess"]}
{"task_id": 6726636, "prompt": "def f_6726636():\n\treturn ", "suffix": "", "canonical_solution": "\"\"\"\"\"\".join(['a', 'b', 'c'])", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate() == \"abc\"\n", "\n    assert candidate() == 'a' + 'b' + 'c'\n"], "entry_point": "f_6726636", "intent": "concatenate a list of strings `['a', 'b', 'c']`", "library": []}
{"task_id": 18079563, "prompt": "def f_18079563(s1, s2):\n\treturn ", "suffix": "", "canonical_solution": "pd.Series(list(set(s1).intersection(set(s2))))", "test_start": "\nimport pandas as pd\n\ndef check(candidate):", "test": ["\n    x1, x2 = pd.Series([1,2]), pd.Series([1,3])\n    assert candidate(x1, x2).equals(pd.Series([1]))\n", "\n    x1, x2 = pd.Series([1,2]), pd.Series([1,3, 10, 4, 5, 9])\n    assert candidate(x1, x2).equals(pd.Series([1]))\n", "\n    x1, x2 = pd.Series([1,2]), pd.Series([1,2, 10])\n    assert candidate(x1, x2).equals(pd.Series([1, 2]))\n"], "entry_point": "f_18079563", "intent": "find intersection data between series `s1` and series `s2`", "library": ["pandas"]}
{"task_id": 8315209, "prompt": "def f_8315209(client):\n\t", "suffix": "\n\treturn ", "canonical_solution": "client.send('HTTP/1.0 200 OK\\r\\n')", "test_start": "\nimport socket\nfrom unittest.mock import Mock\nimport mock\n\ndef check(candidate):", "test": ["\n    with mock.patch('socket.socket') as mock_socket:\n        mock_socket.return_value.recv.return_value = ''\n        mock_socket.bind(('', 8080))\n        mock_socket.listen(5)\n        mock_socket.accept = Mock(return_value = mock_socket)\n        mock_socket.send = Mock()\n        try:\n            candidate(mock_socket)\n        except:\n            assert False\n"], "entry_point": "f_8315209", "intent": "sending http headers to `client`", "library": ["socket"]}
{"task_id": 26153795, "prompt": "def f_26153795(when):\n\treturn ", "suffix": "", "canonical_solution": "datetime.datetime.strptime(when, '%Y-%m-%d').date()", "test_start": "\nimport datetime\n\ndef check(candidate):", "test": ["\n    assert candidate('2013-05-07') == datetime.date(2013, 5, 7)\n", "\n    assert candidate('2000-02-29') == datetime.date(2000, 2, 29)\n", "\n    assert candidate('1990-01-08') == datetime.date(1990, 1, 8)\n", "\n    assert candidate('1990-1-08') == datetime.date(1990, 1, 8)\n", "\n    assert candidate('1990-1-8') == datetime.date(1990, 1, 8)\n", "\n    assert candidate('1990-01-8') == datetime.date(1990, 1, 8)\n"], "entry_point": "f_26153795", "intent": "Format a datetime string `when` to extract date only", "library": ["datetime"]}
{"task_id": 172439, "prompt": "def f_172439(inputString):\n\treturn ", "suffix": "", "canonical_solution": "inputString.split('\\n')", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate('line a\\nfollows by line b\t...bye\\n') ==         ['line a', 'follows by line b\t...bye', '']\n", "\n    assert candidate('no new line in this sentence. ') == ['no new line in this sentence. ']\n", "\n    assert candidate('a\tbfs hhhdf\tsfdas') == ['a\tbfs hhhdf\tsfdas']\n", "\n    assert candidate('') == ['']\n"], "entry_point": "f_172439", "intent": "split a multi-line string `inputString` into separate strings", "library": []}
{"task_id": 172439, "prompt": "def f_172439():\n\treturn ", "suffix": "", "canonical_solution": "' a \\n b \\r\\n c '.split('\\n')", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate() == [' a ', ' b \\r', ' c ']\n"], "entry_point": "f_172439", "intent": "Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`", "library": []}
{"task_id": 13954222, "prompt": "def f_13954222(b):\n\treturn ", "suffix": "", "canonical_solution": "\"\"\":\"\"\".join(str(x) for x in b)", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate(['x','y','zzz']) == 'x:y:zzz'\n", "\n    assert candidate(['111','22','3']) == '111:22:3'\n", "\n    assert candidate(['']) == ''\n", "\n    assert candidate([':',':']) == ':::'\n", "\n    assert candidate([',','#','#$%']) == ',:#:#$%'\n", "\n    assert candidate(['a','b','c']) != 'abc'\n"], "entry_point": "f_13954222", "intent": "concatenate elements of list `b` by a colon \":\"", "library": []}
{"task_id": 13567345, "prompt": "def f_13567345(a):\n\treturn ", "suffix": "", "canonical_solution": "a.sum(axis=1)", "test_start": "\nimport numpy as np \n\ndef check(candidate):", "test": ["\n    a1 = np.array([[i for i in range(3)] for j in range(5)])\n    assert np.array_equal(candidate(a1), np.array([3, 3, 3, 3, 3]))\n", "\n    a2 = np.array([[i+j for i in range(3)] for j in range(5)])\n    assert np.array_equal(candidate(a2), np.array([ 3,  6,  9, 12, 15]))\n", "\n    a3 = np.array([[i*j for i in range(3)] for j in range(5)])\n    assert np.array_equal(candidate(a3), np.array([ 0,  3,  6,  9, 12]))\n"], "entry_point": "f_13567345", "intent": "Calculate sum over all rows of 2D numpy array `a`", "library": ["numpy"]}
{"task_id": 29784889, "prompt": "def f_29784889():\n\t", "suffix": "\n\treturn ", "canonical_solution": "warnings.simplefilter('always')", "test_start": "\nimport warnings \n\ndef check(candidate):", "test": ["\n    candidate() \n    assert any([(wf[0] == 'always') for wf in warnings.filters])\n"], "entry_point": "f_29784889", "intent": "enable warnings using action 'always'", "library": ["warnings"]}
{"task_id": 13550423, "prompt": "def f_13550423(l):\n\treturn ", "suffix": "", "canonical_solution": "' '.join(map(str, l))", "test_start": "\ndef check(candidate):", "test": ["\n    assert candidate(['x','y','zzz']) == 'x y zzz'\n", "\n    assert candidate(['111','22','3']) == '111 22 3'\n", "\n    assert candidate(['']) == ''\n", "\n    assert candidate([':',':']) == ': :'\n", "\n    assert candidate([',','#','#$%']) == ', # #$%'\n", "\n    assert candidate(['a','b','c']) != 'abc'\n"], "entry_point": "f_13550423", "intent": "concatenate items of list `l` with a space ' '", "library": []}
{"task_id": 698223, "prompt": "def f_698223():\n\treturn ", "suffix": "", "canonical_solution": "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "test_start": "\nimport time \n\ndef check(candidate):", "test": ["\n    answer = time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')\n    assert candidate() == answer\n    false_1 = time.strptime('30/03/09 17:31:32.123', '%d/%m/%y %H:%M:%S.%f')\n    assert candidate() != false_1\n    false_2 = time.strptime('20/03/09 17:31:32.123', '%d/%m/%y %H:%M:%S.%f')\n    assert candidate() != false_2\n"], "entry_point": "f_698223", "intent": "parse a time string '30/03/09 16:31:32.123' containing milliseconds in it", "library": ["time"]}
{"task_id": 6633523, "prompt": "def f_6633523(my_string):\n\t", "suffix": "\n\treturn my_float", "canonical_solution": "my_float = float(my_string.replace(',', ''))", "test_start": "\ndef check(candidate):", "test": ["\n    assert (candidate('1,234.00') - 1234.0) < 1e-6\n", "\n    assert (candidate('0.00') - 0.00) < 1e-6\n", "\n    assert (candidate('1,000,000.00') - 1000000.00) < 1e-6\n", "\n    assert (candidate('1,000,000.00') - 999999.98) > 1e-6\n", "\n    assert (candidate('1') - 1.00) < 1e-6\n"], "entry_point": "f_6633523", "intent": "convert a string `my_string` with dot and comma into a float number `my_float`", "library": []}
{"task_id": 6633523, "prompt": "def f_6633523():\n\treturn ", "suffix": "", "canonical_solution": "float('123,456.908'.replace(',', ''))", "test_start": "\ndef check(candidate):", "test": ["\n    assert (candidate() - 123456.908) < 1e-6\n    assert (candidate() - 123456.9) > 1e-6\n    assert (candidate() - 1234.908) > 1e-6\n    assert type(candidate()) == float\n    assert int(candidate()) == 123456\n"], "entry_point": "f_6633523", "intent": "convert a string `123,456.908` with dot and comma into a floating number", "library": []}
